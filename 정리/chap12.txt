=== 메시지 - 기본 ===
유지보수와 로케일 별 언어지원을 위한 기능

1. 문자열을 담은 *.properties(메시지 파일) 작성
  /src/main/resources/ 아래에 작성한다.
	
	ex) /src/main/resources/message/label.properties
		test=테스트
		test.title=테스트 제목
		...
		
2. 스프링 설정에 메시지 파일의 값을 읽어오는 MessageSource 빈을 설정
	// 메시지 설정 빈 이름을 꼭 camelCase로 작성해야함.
	@Bean
	public MessageSource messageSource() {
		ResourceBundleMessageSource ms =
				new ResourceBundleMessageSource();
				
		// 여기선 message폴더 밑 label 프로퍼티 파일을 지정.
		// 에러를 위한 메시지 파일 등도 추가가능.
		ms.setBasenames("message.label", "message.error");
		ms.setDefaultEncoding("UTF-8");
		return ms;
	}
	
3. View 에서 스프링의 <Spring:message> 태그를 이용해 값을 불러옴.
	<%@ taglib prefix="spring" uri="http://www.springframework.org/tags" %>
	
	<Spring:message code="test.title" />
	
=== 메시지 - 유효성 검사 ===
Validator 인터페이스와 메시지 파일을 이용하여 폼에서 받은 커맨드 객체의 유효성을 검사한다.

1. Validator 인터페이스 구체화.
	* 보통 커맨드클래스이름에 Validator를 붙여 클래스명을 짓는다.
	ex) RegisterCommandValidator
	
	// 전달받은 aClass객체가 해당 클래스 타입으로 변환 가능한지 검증.
	@Override
	public boolean supports(Class<?> clazz) {
		// 여기선 RegisterRequest라는 커맨드 객체를 예로든다.
		return RegisterRequest.class.isAssignableFrom(clazz);
	}
	
	// 실질적 검증 코드
	@Override
	public void validate(Object target, Errors errors) {
	
		// 커맨드 객체의 email 필드가 비었거나 빈칸이 있는지 검증.
		// 아래 코드는 ValidationUtils.rejectIfEmptyOrWhitespace(errors, "email", "required"); 와 같은 코드다.
		// 위 코드는 구조상 errors가 이후에 프로퍼티값을 알 수 있어서 target을 안받아도 됨.
		RegisterRequest regReq = (RegisterRequest) target;
		if (regReq.getEmail() == null || regReq.getEmail().trim().isEmpty()) {
			errors.rejectValue("email", "required");
		}
		
		// "name" 프로퍼티에 "required"라는 에러코드를 추가한다.
		// 이 에러코드는 메시지 파일에 있어야한다. ex) required=필수항목입니다.
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "name", "required");
		ValidationUtils.rejectIfEmpty(errors, "password", "required");
	}
	
2. 컨트롤러 단에서 객체 검증.

	// http get -> register/regist에서 폼을 작성 후 post하여 넘겨받는 상황
	@PostMapping("register/regist")
    public String done(RegisterRequest request, Errors errors) {

        new RegisterRequestValidator().validate(request, errors);

		// 
        if(errors.hasErrors()) {
            System.out.println("hasErrors");
            return "register/regist";
        }
	}